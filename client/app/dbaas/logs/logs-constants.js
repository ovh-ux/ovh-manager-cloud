/* eslint-disable no-useless-escape */
angular.module('managerApp').constant('LogsConstants', {
  COLDSTORAGE: 'COLDSTORAGE',
  DESCRIPTION_MIN_LENGTH: 3,
  EXPOSED_PORT_MIN: 514,
  EXPOSED_PORT_MAX: 65535,
  DISPLAY_NAME_MAX_LENGTH: 255,
  FAILURE: 'FAILURE',
  SUCCESS: 'SUCCESS',
  suffixPattern: '^[a-z0-9_-]+$',
  ORDER_URL: "/order/express/#/new/express/resume?products=~(~(planCode~'logs-basic~productId~'logs))",
  LOGS_DOCS_NAME: 'logs-data-platform',
  LOGS_PRODUCT_URL: '/data-platforms/logs/',
  ELASTICSEARCH_API_URL: 'ELASTICSEARCH_API',
  SERVICE_STATE_TO_CONFIG: 'TO_CONFIG',
  SERVICE_STATE_DISABLED: 'DISABLED',
  SERVICE_STATE_ENABLED: 'ENABLED',
  PASSWORD_SPECIAL_CHARACTERS: "!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~",
  MESSAGE_THRESHOLD: 1000,
  WEB_SOCKET_URL: 'WEB_SOCKET',
  RFC_URL: 'TCP_TLS_RFC5424',
  LTSV_URL: 'TCP_TLS_LTSV_NUL',
  GELF_URL: 'TCP_TLS_GELF',
  GELF: 'GELF',
  LTSV: 'LTSV',
  RFC5424: 'RFC5424',
  GRAYLOG_WEBUI: 'GRAYLOG_WEBUI',
  X_OVH_TOKEN: 'X-OVH-TOKEN',
  GZIP: 'GZIP',
  DEFLATED: 'DEFLATED',
  LZMA: 'LZMA',
  ZSTD: 'ZSTD',
  PCA: 'PCA',
  PCS: 'PCS',
  CONTENT_ALL: 'ALL',
  CONTENT_PLAIN: 'PLAIN',
  CONTENT_GELF: 'GELF',
  LOGS_PRO: 'logs-pro',
  TITLE_MIN_LENGTH: 3,
  TITLE_MAX_LENGTH: 255,
  FIELD_MIN_LENGTH: 3,
  FIELD_MAX_LENGTH: 50,
  VALUE_MIN_LENGTH: 1,
  VALUE_MAX_LENGTH: 50,
  TIME_PERIOD_MIN_IN_SECONDS: 1,
  TIME_PERIOD_MAX_IN_SECONDS: 3600,
  THRESHOLD_MIN: 0,
  GRACE_PERIOD_MIN_IN_MINUTES: 1,
  GRACE_PERIOD_MAX_IN_MINUTES: 60,
  BACKLOG_MIN: 1,
  BACKLOG_MAX: 20,
  expirationInSeconds: 86400,
  indexStorage: {
    success: 'success',
    error: 'error',
    warning: 'warning',
  },
  alertType: {
    counter: 'MESSAGE_COUNT',
    numeric: 'FIELD_VALUE',
    textual: 'FIELD_CONTENT_VALUE',
  },
  thresholdType: {
    more: 'MORE',
    less: 'LESS',
    lower: 'LOWER',
    higher: 'HIGHER',
  },
  constraintType: {
    mean: 'MEAN',
    min: 'MIN',
    max: 'MAX',
    sum: 'SUM',
    sd: 'STDDEV',
  },
  state: {
    SEALED: 'sealed',
    UNSEALED: 'unsealed',
    UNSEALING: 'unsealing',
  },
  stateType: {
    sealed: 'info',
    unsealed: 'success',
    unsealing: 'warning',
  },
  URLS: {
    GRAYLOG_WEBUI: 'GRAYLOG_WEBUI',
    GRAYLOG_API: 'GRAYLOG_API',
    ELASTICSEARCH_API: 'ELASTICSEARCH_API',
  },
  PORT_TYPES: {
    TCP_TLS: 'TCP/TLS',
    TCP: 'TCP',
    UDP: 'UDP',
  },
  MESSAGE_TYPES: {
    GELF: 'Gelf',
    RFC5424: 'Syslog RFC5424',
    LTSV_LINE: 'LTSV line',
    LTSV_NUL: 'LTSV nul',
    CAP_N_PROTO: 'Cap’n’Proto',
  },
  URL_TYPES: {
    TCP_TLS_GELF: {
      PORT: 'TCP_TLS',
      MESSAGE: 'GELF',
    },
    TCP_GELF: {
      PORT: 'TCP',
      MESSAGE: 'GELF',
    },
    UDP_GELF: {
      PORT: 'UDP',
      MESSAGE: 'GELF',
    },
    TCP_TLS_RFC5424: {
      PORT: 'TCP_TLS',
      MESSAGE: 'RFC5424',
    },
    TCP_RFC5424: {
      PORT: 'TCP',
      MESSAGE: 'RFC5424',
    },
    UDP_RFC5424: {
      PORT: 'UDP',
      MESSAGE: 'RFC5424',
    },
    TCP_TLS_LTSV_LINE: {
      PORT: 'TCP_TLS',
      MESSAGE: 'LTSV_LINE',
    },
    TCP_LTSV_LINE: {
      PORT: 'TCP',
      MESSAGE: 'LTSV_LINE',
    },
    UDP_LTSV_LINE: {
      PORT: 'UDP',
      MESSAGE: 'LTSV_LINE',
    },
    TCP_TLS_LTSV_NUL: {
      PORT: 'TCP_TLS',
      MESSAGE: 'LTSV_NUL',
    },
    TCP_LTSV_NUL: {
      PORT: 'TCP',
      MESSAGE: 'LTSV_NUL',
    },
    UDP_LTSV_NUL: {
      PORT: 'UDP',
      MESSAGE: 'LTSV_NUL',
    },
    TCP_TLS_CAP_N_PROTO: {
      PORT: 'TCP_TLS',
      MESSAGE: 'CAP_N_PROTO',
    },
    TCP_CAP_N_PROTO: {
      PORT: 'TCP',
      MESSAGE: 'CAP_N_PROTO',
    },
    UDP_CAP_N_PROTO: {
      PORT: 'UDP',
      MESSAGE: 'CAP_N_PROTO',
    },
  },
  DATA_STORAGE: {
    TIME_PERIOD_MONTHS: 3,
    METRICS: {
      SUM: 'ldp.service.consumption.sum',
      COUNT: 'ldp.service.consumption.count',
      COLD_STORAGE_TOTAL: 'ldp.service.coldstorage.total',
    },
    AGGREGATORS: {
      ZIMSUM: 'zimsum',
    },
    DOWNSAMPLING_MODE: {
      '24H_MAX': '24h-avg-none',
    },
  },
  OFFER_STORAGE_MULTIPLIER: 1073741824,
  DATA_USAGE_GRAPH_CONFIGURATION: {
    options: {
      scales: {
        xAxes: [{
          gridLines: {
            display: false,
          },
        }],
        yAxes: [
          {
            id: 'y-axis-1',
            type: 'linear',
            display: true,
            position: 'left',
          },
          {
            id: 'y-axis-2',
            type: 'linear',
            display: true,
            position: 'right',
            gridLines: {
              display: false,
            },
          },
        ],
      },
      legend: {
        display: true,
        position: 'bottom',
        labels: {
          fontStyle: 'bold',
        },
      },
      tooltips: {
        backgroundColor: 'rgba(256,256,256,0.8)',
        titleFontColor: '#113f6d',
        bodyFontColor: '#113f6d',
        borderColor: '#bbbdbf',
        borderWidth: 1,
        position: 'nearest',
      },
    },
    colors: [
      {
        backgroundColor: 'rgba(89,210,239, 0.4)',
        pointBackgroundColor: 'transparent',
        pointHoverBackgroundColor: '#59d2ef',
        borderColor: '#59d2ef',
        pointBorderColor: 'transparent',
        pointHoverBorderColor: '#fff',
      }, {
        backgroundColor: 'transparent',
        pointBackgroundColor: 'transparent',
        pointHoverBackgroundColor: '#113f6d',
        borderColor: '#113f6d',
        pointBorderColor: 'transparent',
        pointHoverBorderColor: '#fff',
      }, {
        backgroundColor: 'transparent',
        pointBackgroundColor: 'transparent',
        pointHoverBackgroundColor: 'transparent',
        borderColor: '#ff9803',
        pointBorderColor: 'transparent',
        pointHoverBorderColor: 'transparent',
      },
    ],
    datasetOverride: [{ yAxisID: 'y-axis-1' }, { yAxisID: 'y-axis-2' }, { yAxisID: 'y-axis-1' }],
  },
  inputStatus: {
    PROCESSING: 'PROCESSING',
    INIT: 'INIT',
    PENDING: 'PENDING',
    RUNNING: 'RUNNING',
  },
  inputState: {
    PROCESSING: 'processing',
    RESTART_REQUIRED: 'restart_required',
    TO_CONFIGURE: 'to_configure',
    PENDING: 'pending',
    RUNNING: 'running',
    UNKNOWN: 'unknown',
  },
  inputStateType: {
    processing: 'info',
    restart_required: 'info',
    to_configure: 'warning',
    pending: 'info',
    running: 'success',
    unknown: 'error',
  },
  INPUT_DEFAULT_PORT: 6514,
  basicOffer: 'logs-basic',
  offertypes: {
    BASIC: 'Basic',
    PRO: 'Pro',
  },
  productName: 'logs',
  ALIAS_OPTION_REFERENCE: 'logs-alias',
  DASHBOARD_OPTION_REFERENCE: 'logs-dashboard',
  INDEX_OPTION_REFERENCE: 'logs-index',
  INPUT_OPTION_REFERENCE: 'logs-input',
  ROLE_OPTION_REFERENCE: 'logs-role',
  STREAM_OPTION_REFERENCE: 'logs-stream',
  PRODUCT_COUNT: {
    'logs-input-2': 2,
    'logs-input-4': 4,
    'logs-input-8': 8,
    'logs-dashboard-5': 5,
    'logs-stream-5': 5,
    'logs-kibana-1': 1,
    'logs-alias-5': 5,
    'logs-index-1': 1,
    'logs-index-2': 1,
    'logs-index-4': 1,
    'logs-index-8': 1,
    'logs-index-16': 1,
  },
  logstash: 'LOGSTASH',
  flowgger: 'FLOWGGER',
  patternRowFill: 5,
  logStashWizard:
    {
      Syslog: {
        name: 'Syslog',
        input: 'tcp {\n\tport => INPUT_PORT\n\ttype => syslog\n\tssl_enable => true\n\tssl_verify => false\n\tssl_cert => "/etc/ssl/private/server.crt"\n\tssl_key => "/etc/ssl/private/server.key"\n\tssl_extra_chain_certs => ["/etc/ssl/private/ca.crt"]\n}',
        filter: 'grok {\n\tmatch => { "message" => "%{SYSLOGBASE}" }\n}\n\ndate {\n\tmatch => [ "timestamp", "MMM dd HH:mm:ss" ]\n\ttarget => "timestamp"\n\ttimezone => "Europe/Paris"\n}',
        patterns: '',
        documentation: 'https://docs.ovh.com/gb/en/mobile-hosting/logs-data-platform/how-to-log-your-linux/',
      },
      Filebeat: {
        name: 'Filebeat',
        input: 'beats {\n\tport => INPUT_PORT\n\tssl => true\n\tssl_certificate => "/etc/ssl/private/server.crt"\n\tssl_key => "/etc/ssl/private/server.key"\n}',
        filter: "if [fileset][module] == \"apache2\" or [fileset][module] == \"apache\" {\r\n\tif [fileset][name] == \"access\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{IPORHOST:[apache2][access][remote_ip]} - %{DATA:[apache2][access][user_name]} \\[%{HTTPDATE:[apache2][access][time]}\\] \\\"(?:%{WORD:[apache2][access][method]} %{DATA:[apache2][access][url]} HTTP/%{NUMBER:[apache2][access][http_version]:float}|-)?\\\" %{NUMBER:[apache2][access][response_code]:int} (?:%{NUMBER:[apache2][access][body_sent][bytes]:int}|-)( \\\"%{DATA:[apache2][access][referrer]}\\\")?( \\\"%{DATA:[apache2][access][agent]}\\\")?\",\r\n\t\t\t\t\"%{IPORHOST:[apache2][access][remote_ip]} - %{DATA:[apache2][access][user_name]} \\[%{HTTPDATE:[apache2][access][time]}\\] \\\"-\\\" %{NUMBER:[apache2][access][response_code]:int} -\",\r\n\t\t\t\t\"\\[%{HTTPDATE:[apache2][access][time]}\\] %{IPORHOST:[apache2][access][remote_ip]} %{DATA:[apache2][access][ssl][protocol]} %{DATA:[apache2][access][ssl][cipher]} \\\"%{WORD:[http][request][method]} %{DATA:[apache2][access][url]} HTTP/%{NUMBER:[apache2][access][http_version]:float}\\\" %{NUMBER:[apache2][access][body_sent][bytes]:int}\"]\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[apache2][access][time]\", \"dd/MMM/yyyy:H:m:s Z\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[apache2][access][time]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[apache2][access][time]\", \"dd/MMM/yyyy:H:m:s Z\" ]\r\n\t\t\t\t\tremove_field => \"[apache2][access][time]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [apache2][access][agent] {\r\n\t\t\t\tuseragent {\r\n\t\t\t\t\tsource => \"[apache2][access][agent]\"\r\n\t\t\t\t\ttarget => \"[apache2][access][user_agent]\"\r\n\t\t\t\t}\r\n\t\t\t\tmutate {\r\n\t\t\t\t\trename => { \"[apache2][access][agent]\" => \"[apache2][access][user_agent][original]\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n#\t\t\tif [apache2][access][remote_ip] {\r\n#\t\t\t\tgeoip {\r\n#\t\t\t\t\tsource => \"[apache2][access][remote_ip]\"\r\n#\t\t\t\t\ttarget => \"[apache2][access][geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"error\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"\\[%{APACHE_TIME:[apache2][error][timestamp]}\\] \\[%{LOGLEVEL:[apache2][error][level]}\\]( \\[client %{IPORHOST:[apache2][error][client]}\\])? %{GREEDYDATA:[apache2][error][message]}\",\r\n\t\t\t\t\"\\[%{APACHE_TIME:[apache2][error][timestamp]}\\] \\[%{DATA:[apache2][error][module]}:%{LOGLEVEL:[apache2][error][level]}\\] \\[pid %{NUMBER:[apache2][error][pid]:int}(:tid %{NUMBER:[apache2][error][tid]:int})?\\]( \\[client %{IPORHOST:[apache2][error][client]}\\])? %{GREEDYDATA:[apache2][error][message1]}\"]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"APACHE_TIME\" => \"%{DAY} %{MONTH} %{MONTHDAY} %{TIME} %{YEAR}\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tif [apache2][access][message1] {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\trename => { \"[apache2][error][message1]\" => \"[apache2][error][message]\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[apache2][error][timestamp]\", \"EEE MMM dd H:m:s yyyy\", \"EEE MMM dd H:m:s.SSSSSS yyyy\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[apache2][error][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[apache2][error][timestamp]\", \"EEE MMM dd H:m:s YYYY\", \"EEE MMM dd H:m:s.SSSSSS YYYY\" ]\r\n\t\t\t\t\tremove_field => \"[apache2][error][timestamp]\"\r\n\t\t\t\t }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"mysql\" {\r\n\tif [fileset][name] == \"error\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{LOCALDATETIME:[mysql][error][timestamp]} (\\[%{DATA:[mysql][error][level]}\\] )?%{GREEDYDATA:[mysql][error][message]}\",\r\n\t\t\t\t\"%{DATA:[mysql][error][timestamp]} %{NUMBER:[mysql][error][thread_id]:int} \\[%{DATA:[mysql][error][level]}\\] %{GREEDYDATA:[mysql][error][message1]}\",\r\n\t\t\t\t\"%{GREEDYDATA:[mysql][error][message2]}\"]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"LOCALDATETIME\" => \"[0-9]+ %{TIME}\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tif [mysql][error][message1] {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\trename => { \"[mysql][error][message1]\" => \"[mysql][error][message]\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [mysql][error][message2] {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\trename => { \"[mysql][error][message2]\" => \"[mysql][error][message]\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [mysql][error][timestamp] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[mysql][error][timestamp]\", \"ISO8601\", \"yyMMdd H:m:s\" ]\r\n\t\t\t\t\tremove_field => \"[mysql][error][time]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"slowlog\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\"^# User@Host: %{USER:[mysql][slowlog][user]}(\\[%{USER:[mysql][slowlog][current_user]}\\])? @ %{HOSTNAME:[mysql][slowlog][host]}? \\[%{IP:[mysql][slowlog][ip]}?\\]%{METRICSPACE}(Id:%{SPACE}%{NUMBER:[mysql][slowlog][id]:int}%{METRICSPACE})?(Thread_id:%{SPACE}%{NUMBER:[mysql][slowlog][id]:int}%{METRICSPACE})?(Schema:%{SPACE}%{WORD:[mysql][slowlog][schema]}?%{METRICSPACE})?(Last_errno: %{NUMBER:[mysql][slowlog][last_errno]:int}%{METRICSPACE})?(Killed: %{NUMBER:[mysql][slowlog][killed]:int}%{METRICSPACE})?(QC_hit: %{WORD:[mysql][slowlog][query_cache_hit]}%{METRICSPACE})?(Query_time: %{NUMBER:[mysql][slowlog][query_time][sec]:float}%{METRICSPACE})?(Lock_time: %{NUMBER:[mysql][slowlog][lock_time][sec]:float}%{METRICSPACE})?(Rows_sent: %{NUMBER:[mysql][slowlog][rows_sent]:int}%{METRICSPACE})?(Rows_examined: %{NUMBER:[mysql][slowlog][rows_examined]:int}%{METRICSPACE})?(Rows_affected: %{NUMBER:[mysql][slowlog][rows_affected]:int}%{METRICSPACE})?(Bytes_sent: %{NUMBER:[mysql][slowlog][bytes_sent]:int}%{METRICSPACE})?(Tmp_tables: %{NUMBER:[mysql][slowlog][tmp_tables]:int}%{METRICSPACE})?(Tmp_disk_tables: %{NUMBER:[mysql][slowlog][tmp_disk_tables]:int}%{METRICSPACE})?(Tmp_table_sizes: %{NUMBER:[mysql][slowlog][tmp_table_sizes]:int}%{METRICSPACE})?(InnoDB_trx_id: %{WORD:[mysql][slowlog][innodb.trx_id]}%{METRICSPACE})?(QC_Hit: %{WORD:[mysql][slowlog][query_cache_hit]}%{METRICSPACE})?(Full_scan: %{WORD:[mysql][slowlog][full_scan]}%{METRICSPACE})?(Full_join: %{WORD:[mysql][slowlog][full_join]}%{METRICSPACE})?(Tmp_table: %{WORD:[mysql][slowlog][tmp_table]}%{METRICSPACE})?(Tmp_table_on_disk: %{WORD:[mysql][slowlog][tmp_table_on_disk]}%{METRICSPACE})?(Filesort: %{WORD:[mysql][slowlog][filesort]}%{METRICSPACE})?(Filesort_on_disk: %{WORD:[mysql][slowlog][filesort_on_disk]}%{METRICSPACE})?(Merge_passes: %{NUMBER:[mysql][slowlog][merge_passes]:int}%{METRICSPACE})?(Priority_queue: %{WORD:[mysql][slowlog][priority_queue]}%{METRICSPACE})?(No InnoDB statistics available for this query%{METRICSPACE})?(InnoDB_IO_r_ops: %{NUMBER:[mysql][slowlog][innodb][io_r_ops]:int}%{METRICSPACE})?(InnoDB_IO_r_bytes: %{NUMBER:[mysql][slowlog][innodb][io_r_bytes]:int}%{METRICSPACE})?(InnoDB_IO_r_wait: %{NUMBER:[mysql][slowlog][innodb][io_r_wait][sec]:float}%{METRICSPACE})?(InnoDB_rec_lock_wait: %{NUMBER:[mysql][slowlog][innodb][rec_lock_wait][sec]:float}%{METRICSPACE})?(InnoDB_queue_wait: %{NUMBER:[mysql][slowlog][innodb][queue_wait][sec]:float}%{METRICSPACE})?(InnoDB_pages_distinct: %{NUMBER:[mysql][slowlog][innodb][pages_distinct]:int}%{METRICSPACE})?(Log_slow_rate_type: %{WORD:[mysql][slowlog][log_slow_rate_type]}%{METRICSPACE})?(Log_slow_rate_limit: %{NUMBER:[mysql][slowlog][log_slow_rate_limit]:int}%{METRICSPACE})?%{EXPLAIN}?(use %{WORD:[mysql][slowlog][schema]};\\n)?SET timestamp=%{NUMBER:[mysql][slowlog][timestamp]};\\n%{GREEDYMULTILINE:[mysql][slowlog][query]}\"] }\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t\t\"METRICSPACE\" => \"([ #\\n]*)\"\r\n\t\t\t\t\"EXPLAIN\" => \"(# explain:.*\\n|#\\s*\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[mysql][slowlog][timestamp]\", \"UNIX\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"nginx\" {\r\n\tif [fileset][name] == \"access\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\"\\\"?%{IP_LIST:[nginx][access][remote_ip]} - %{DATA:[nginx][access][user_name]} \\[%{HTTPDATE:[nginx][access][time]}\\] \\\"%{GREEDYDATA:[nginx][access][info]}\\\" %{NUMBER:[nginx][access][response_code]:int} %{NUMBER:[nginx][access][body_sent.bytes]:int} \\\"%{DATA:[nginx][access][referrer]}\\\" \\\"%{DATA:[nginx][access][agent]}\\\"\"] }\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"IP_LIST\" => \"%{IP}(\\\"?,?\\s*%{IP})*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tgrok {\r\n\t\t\t\tmatch => { \"[nginx][access][info]\" => [\r\n\t\t\t\t\t\"%{WORD:[nginx][access][method]} %{DATA:[nginx][access][url]} HTTP/%{NUMBER:[nginx][access][http_version]:float}\",\r\n\t\t\t\t\t\"\"]\r\n\t\t\t\tremove_field => [ \"[nginx][access][info]\" ]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[nginx][access][time]\", \"dd/MMM/yyyy:H:m:s Z\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[nginx][access][time]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[nginx][access][time]\", \"dd/MMM/yyyy:H:m:s Z\" ]\r\n\t\t\t\t\tremove_field => \"[nginx][access][time]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tuseragent {\r\n\t\t\t\tsource => \"[nginx][access][agent]\"\r\n\t\t\t\ttarget => \"[nginx][access][user_agent]\"\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[nginx][access][agent]\" => \"[nginx][access][user_agent][original]\" }\r\n\t\t\t}\r\n#\t\t\tgeoip {\r\n#\t\t\t\tsource => \"[nginx][access][remote_ip]\"\r\n#\t\t\t\ttarget => \"[nginx][access][geoip]\"\r\n#\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"error\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\"%{DATA:[nginx][error][time]} \\[%{DATA:[nginx][error][level]}\\] %{NUMBER:[nginx][error][pid]:int}#%{NUMBER:[nginx][error][tid]:int}: (\\*%{NUMBER:[nginx][error][connection_id]:int} )?%{GREEDYDATA:[nginx][error][message]}\"] }\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[nginx][error][time]\", \"yyyy/MM/dd H:m:s\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[nginx][error][time]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[nginx][error][time]\", \"yyyy/MM/dd H:m:s\" ]\r\n\t\t\t\t\tremove_field => \"[nginx][error][time]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"system\" {\r\n\tif [fileset][name] == \"auth\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port %{NUMBER:[system][auth][ssh][port]:int} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: %{DATA:[system][auth][ssh][event]} user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: Did not receive identification string from %{IPORHOST:[system][auth][ssh][dropped_ip]}\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: \\s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]} ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]} ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid:int}\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]} useradd(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: new user: name=%{DATA:[system][auth][useradd][name]}, UID=%{NUMBER:[system][auth][useradd][uid]:int}, GID=%{NUMBER:[system][auth][useradd][gid]:int}, home=%{DATA:[system][auth][useradd][home]}, shell=%{DATA:[system][auth][useradd][shell]}$\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]}? %{DATA:[system][auth][program]}(?:\\[%{POSINT:[system][auth][pid]:int}\\])?: %{GREEDYMULTILINE:[system][auth][message]}\"]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\"=> \"(.|\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[system][auth][timestamp]\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[system][auth][timestamp]\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\r\n\t\t\t\t}\r\n\t\t\t}\r\n#\t\t\tif [system][auth][ip] {\r\n#\t\t\t\tgeoip {\r\n#\t\t\t\t\tsource => \"[system][auth][ssh][ip]\"\r\n#\t\t\t\t\ttarget => \"[system][auth][ssh][geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"syslog\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{SYSLOGHOST:[system][syslog][hostname]} %{DATA:[system][syslog][program]}(?:\\[%{POSINT:[system][syslog][pid]:int}\\])?: %{GREEDYMULTILINE:[system][syslog][message]}\",\r\n\t\t\t\t\"%{SYSLOGTIMESTAMP:[system][syslog][timestamp]} %{GREEDYMULTILINE:[system][syslog][message]}\"]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[system][syslog][timestamp]\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[system][syslog][timestamp]\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"auditd\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{AUDIT_PREFIX} %{AUDIT_KEY_VALUES:[auditd][log][kv]} old auid=%{NUMBER:[auditd][log][old_auid]:int} new auid=%{NUMBER:[auditd][log][new_auid]:int} old ses=%{NUMBER:[auditd][log][old_ses]:int} new ses=%{NUMBER:[auditd][log][new_ses]:int}\",\r\n\t\t\t\t\"%{AUDIT_PREFIX} %{AUDIT_KEY_VALUES:[auditd][log][kv]} msg=['\\\"](%{DATA:[auditd][log][msg]}\\s+)?%{AUDIT_KEY_VALUES:[auditd][log][sub_kv]}['\\\"]\",\r\n\t\t\t\t\"%{AUDIT_PREFIX} %{AUDIT_KEY_VALUES:[auditd][log][kv]}\",\r\n\t\t\t\t\"%{AUDIT_PREFIX}\",\r\n\t\t\t\t\"%{AUDIT_TYPE} %{AUDIT_KEY_VALUES:[auditd][log][kv]}\"]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"AUDIT_TYPE\" => \"^type=%{NOTSPACE:[auditd][log][record_type]}\"\r\n\t\t\t\t\"AUDIT_PREFIX\" => \"%{AUDIT_TYPE} msg=audit\\\\(%{NUMBER:[auditd][log][epoch]:int}:%{NUMBER:[auditd][log][sequence]:int}\\\\):(%{DATA})?\"\r\n\t\t\t\t\"AUDIT_KEY_VALUES\" => \"%{WORD}=%{GREEDYDATA}\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tif [auditd][log][kv] {\r\n\t\t\t\tkv {\r\n\t\t\t\t\tsource => \"[auditd][log][kv]\"\r\n\t\t\t\t\ttarget => \"[auditd][log]\"\r\n\t\t\t\t\tfield_split => \"\\s+\"\r\n\t\t\t\t\tvalue_split => \"=\"\r\n\t\t\t\t\tremove_field => \"[auditd][log][kv]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [auditd][log][sub_kv] {\r\n\t\t\t\tkv {\r\n\t\t\t\t\tsource => \"[auditd][log][sub_kv]\"\r\n\t\t\t\t\ttarget => \"[auditd][log]\"\r\n\t\t\t\t\tfield_split => \"\\s+\"\r\n\t\t\t\t\tvalue_split => \"=\"\r\n\t\t\t\t\tremove_field => \"[auditd][log][sub_kv]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [auditd][log][epoch] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[auditd][log][epoch]\", \"UNIX\" ]\r\n\t\t\t\t\tremove_field => \"[auditd][log][epoch]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n#\t\t\tif [auditd][log][addr] {\r\n#\t\t\t\tgeoip {\r\n#\t\t\t\t\tsource => \"[auditd][log][addr]\"\r\n#\t\t\t\t\ttarget => \"[auditd][log][geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"elasticsearch\" {\r\n\tif [fileset][name] == \"audit\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"^%{CHAR:first_char}\" ] }\r\n\t\t\tpattern_definitions => { \"CHAR\" => \".\" }\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [first_char] == \"{\" {\r\n\t\t\t\tjson {\r\n\t\t\t\t\tsource => \"message\"\r\n\t\t\t\t\ttarget => \"[elasticsearch][audit]\"\r\n\t\t\t\t\tremove_field => \"message\"\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][event][type] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][event][type]\" => \"[elasticsearch][audit][layer]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][event][type] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][event][type]\" => \"[elasticsearch][audit][layer]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][event] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tremove_field => [ \"[elasticsearch][audit][event]\" ]\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][origin][type] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][origin][type]\" => \"[elasticsearch][audit][origin_type]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][origin][address] {\r\n\t\t\t\t\tgrok {\r\n\t\t\t\t\t\tmatch => { \"[elasticsearch][audit][origin][address]\" => [\r\n\t\t\t\t\t\t\t\"\\[%{IPORHOST:[elasticsearch][audit][origin_address]}\\]:%{INT:[elasticsearch][audit][origin_port]:int}\",\r\n\t\t\t\t\t\t\t\"%{IPORHOST:[elasticsearch][audit][origin_address]}:%{INT:[elasticsearch][audit][origin_port]:int}\" ]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][origin] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tremove_field => [ \"[elasticsearch][audit][origin]\" ]\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][user][name] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][user][name]\" => \"[elasticsearch][audit][principal]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][request][method] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][request][method]\" => \"[elasticsearch][audit][request_method]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][request][id] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][request][id]\" => \"[elasticsearch][audit][request_id]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][request][body] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][request][body]\" => \"[elasticsearch][audit][request_body]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][request][name] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tadd_field => { \"[elasticsearch][audit][request]\" => \"%{[elasticsearch][audit][request][name]}\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][url][path] {\r\n\t\t\t\t\tif [elasticsearch][audit][url][query] {\r\n\t\t\t\t\t\tmutate {\r\n\t\t\t\t\t\t\tadd_field => { \"[elasticsearch][audit][uri]\" => \"%{[elasticsearch][audit][url][path]}?%{[elasticsearch][audit][url][query]}\" }\r\n\t\t\t\t\t\t\tremove_field => [ \"[elasticsearch][audit][url][path]\", \"[elasticsearch][audit][url][query]\" ]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmutate {\r\n\t\t\t\t\t\t\tadd_field => { \"[elasticsearch][audit][uri]\" => \"%{[elasticsearch][audit][url][path]}\" }\r\n\t\t\t\t\t\t\tremove_field => [ \"[elasticsearch][audit][url][path]\" ]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][node] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][node]\" => \"[elasticsearch][node]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][user][realm] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][user][realm]\" => \"[elasticsearch][audit][user_realm]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][user][realm] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][user][realm]\" => \"[elasticsearch][audit][user_realm]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][user][roles] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[elasticsearch][audit][user][roles]\" => \"[elasticsearch][audit][roles]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [elasticsearch][audit][user] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tremove_field => [ \"[elasticsearch][audit][user]\" ]\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgrok {\r\n\t\t\t\t\tmatch => { \"message\" => [ \"%{ES_TIMESTAMP}\\s*%{ES_NODE_NAME}\\s*%{ES_AUDIT_LAYER}\\s*%{ES_AUDIT_EVENT_TYPE}\\s*%{ES_AUDIT_ORIGIN_TYPE},?\\s*%{ES_AUDIT_ORIGIN_ADDRESS},?\\s*%{ES_AUDIT_PRINCIPAL},?\\s*%{ES_AUDIT_REALM},?\\s*%{ES_AUDIT_ROLES},?\\s*%{ES_AUDIT_ACTION},?\\s*%{ES_AUDIT_INDICES},?\\s*%{ES_AUDIT_URI},?\\s*%{ES_AUDIT_URI_PARAMS},?\\s*%{ES_AUDIT_REQUEST},?\\s*%{ES_AUDIT_REQUEST_BODY},?\" ]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpattern_definitions => { \r\n\t\t\t\t\t\t\"ES_TIMESTAMP\" => \"\\[%{TIMESTAMP_ISO8601:[elasticsearch][audit][@timestamp]}\\]\"\r\n\t\t\t\t\t\t\"ES_NODE_NAME\" => \"(\\[%{DATA:[elasticsearch][node][name]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_LAYER\" => \"\\[%{WORD:[elasticsearch][audit][layer]}\\]\"\r\n\t\t\t\t\t\t\"ES_AUDIT_EVENT_TYPE\" => \"\\[%{WORD:[elasticsearch][audit][event_type]}\\]\"\r\n\t\t\t\t\t\t\"ES_AUDIT_ORIGIN_TYPE\" => \"(origin_type\\=\\[%{WORD:[elasticsearch][audit][origin_type]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_ORIGIN_ADDRESS\" => \"(origin_address\\=\\[%{IPORHOST:[elasticsearch][audit][origin_address]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_PRINCIPAL\" => \"(principal\\=\\[%{DATA:[elasticsearch][audit][principal]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_REALM\" => \"(realm\\=\\[%{WORD:[elasticsearch][audit][realm]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_ROLES\" => \"(roles\\=\\[%{DATA:[elasticsearch][audit][roles]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_ACTION\" => \"(action\\=\\[%{DATA:[elasticsearch][audit][action]}(\\[%{DATA:[elasticsearch][audit][sub_action]}\\])?\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_URI\" => \"(uri=\\[%{DATA:[elasticsearch][audit][uri]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_URI_PARAMS\" => \"(params=\\[%{DATA:[elasticsearch][audit][uri_params]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_INDICES\" => \"(indices\\=\\[%{DATA:[elasticsearch][audit][indices]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_REQUEST\" => \"(request\\=\\[%{WORD:[elasticsearch][audit][request]}\\])?\"\r\n\t\t\t\t\t\t\"ES_AUDIT_REQUEST_BODY\" => \"(request_body\\=\\[%{DATA:[elasticsearch][audit][request_body]}\\])?\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tsplit => { \"[elasticsearch][audit][indices]\" => \",\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif [elasticsearch][audit][sub_action] {\r\n\t\t\t\t\t\tmutate {\r\n\t\t\t\t\t\t\tmerge => { \"[elasticsearch][audit][action]\" => \"[elasticsearch][audit][sub_action]\" }\r\n\t\t\t\t\t\t\tremove_field => \"[elasticsearch][audit][sub_action]\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [elasticsearch][audit][@timestamp] {\r\n\t\t\t\tif [beat][timezone] {\r\n\t\t\t\t\tdate {\r\n\t\t\t\t\t\tmatch => [ \"[elasticsearch][audit][@timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\t\tremove_field => \"[elasticsearch][audit][@timestamp]\"\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tdate {\r\n\t\t\t\t\t\tmatch => [ \"[elasticsearch][audit][@timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\t\tremove_field => \"[elasticsearch][audit][@timestamp]\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"first_char\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"deprecation\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"\\[%{TIMESTAMP_ISO8601:timestamp}\\]\\[%{LOGLEVEL:[log][level]}%{SPACE}*\\]\\[%{DATA:[elasticsearch][server][component]}%{SPACE}*\\] %{GREEDYMULTILINE:message}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"timestamp\", \"ISO8601\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"timestamp\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"timestamp\", \"ISO8601\" ]\r\n\t\t\t\t\tremove_field => \"timestamp\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"gc\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"(?:%{JVM8HEADER}|%{JVM9HEADER}) Total time for which application threads were stopped: %{BASE10NUM:[elasticsearch][gc][threads_total_stop_time_sec]:float} seconds, Stopping threads took: %{BASE10NUM:[elasticsearch][gc][stopping_threads_time_sec]:float} seconds\",\r\n\t\t\t\t\"(?:%{JVM8HEADER}) \\[GC \\(%{DATA:[elasticsearch][gc][phase][name]}\\) \\[YG occupancy: %{BASE10NUM:[elasticsearch][gc][young_gen][used_kb]:int} K \\(%{BASE10NUM:[elasticsearch][gc][young_gen][size_kb]:int} K\\)\\]%{BASE10NUM}: \\[Rescan \\(parallel\\) , %{BASE10NUM:[elasticsearch][gc][phase][parallel_rescan_time_sec]:float} secs\\]%{BASE10NUM}: \\[weak refs processing, %{BASE10NUM:[elasticsearch][gc][phase][weak_refs_processing_time_sec]:float} secs\\]%{BASE10NUM}: \\[class unloading, %{BASE10NUM:[elasticsearch][gc][phase][class_unload_time_sec]:float} secs\\]%{BASE10NUM}: \\[scrub symbol table, %{BASE10NUM:[elasticsearch][gc][phase][scrub_symbol_table_time_sec]:float} secs\\]%{BASE10NUM}: \\[scrub string table, %{BASE10NUM:[elasticsearch][gc][phase][scrub_string_table_time_sec]:float} secs\\]\\[1 CMS-remark: %{BASE10NUM:[elasticsearch][gc][old_gen][used_kb]:int}K\\(%{BASE10NUM:[elasticsearch][gc][old_gen][size_kb]:int}K\\)\\] %{BASE10NUM:[elasticsearch][gc][heap][used_kb]:int}K\\(%{BASE10NUM:[elasticsearch][gc][heap][size_kb]:int}K\\), %{BASE10NUM:[elasticsearch][gc][phase][duration_sec]:float} secs\\] %{PROCTIME}\",\r\n\t\t\t\t\"(?:%{JVM8HEADER}) \\[GC \\(%{DATA:[elasticsearch][gc][phase][name]}\\) \\[%{BASE10NUM} CMS-initial-mark: %{BASE10NUM:[elasticsearch][gc][old_gen][used_kb]:int}K\\(%{BASE10NUM:[elasticsearch][gc][old_gen][size_kb]:int}K\\)\\] %{BASE10NUM:[elasticsearch][gc][heap][used_kb]:int}K\\(%{BASE10NUM:[elasticsearch][gc][heap][size_kb]:int}K\\), %{BASE10NUM:[elasticsearch][gc][phase][duration_sec]:float} secs\\] %{PROCTIME}\",\r\n\t\t\t\t\"%{JVM9HEADER} GC\\(%{BASE10NUM}\\) ParNew: %{BASE10NUM}K-\\>%{BASE10NUM:[elasticsearch][gc][young_gen][used_kb]:int}K\\(%{BASE10NUM:[elasticsearch][gc][young_gen][size_kb]:int}K\\)\",\r\n\t\t\t\t\"%{JVM9HEADER} GC\\(%{BASE10NUM}\\) Old: %{BASE10NUM}K-\\>%{BASE10NUM:[elasticsearch][gc][old_gen][used_kb]:int}K\\(%{BASE10NUM:[elasticsearch][gc][old_gen][size_kb]:int}K\\)\",\r\n\t\t\t\t\"(?:%{JVM8HEADER}|%{JVM9HEADER}) %{GREEDYMULTILINE:message}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t\t\"JVM8HEADER\" => \"%{TIMESTAMP_ISO8601:timestamp}: %{BASE10NUM:[elasticsearch][gc][jvm_runtime_sec]:float}:\"\r\n\t\t\t\t\"JVM9HEADER\" => \"\\[%{TIMESTAMP_ISO8601:timestamp}\\]\\[%{POSINT:[process][pid]:int}\\]\\[%{DATA:[elasticsearch][gc][tags]}%{SPACE}*\\]\"\r\n\t\t\t\t\"PROCTIME\" => \"\\[Times: user=%{BASE10NUM:[elasticsearch][gc][phase][cpu_time][user_sec]:float} sys=%{BASE10NUM:[elasticsearch][gc][phase][cpu_time][sys_sec]:float}, real=%{BASE10NUM:[elasticsearch][gc][phase][cpu_time][real_sec]:float} secs\\]\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"timestamp\", \"ISO8601\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"timestamp\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"timestamp\", \"ISO8601\" ]\r\n\t\t\t\t\tremove_field => \"timestamp\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [elasticsearch][gc][tags] {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\tsplit => { \"[elasticsearch][gc][tags]\" => \",\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"server\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{LOG_HEADER}%{GC_ALL}\",\r\n\t\t\t\t\"%{LOG_HEADER}%{GC_YOUNG}\",\r\n\t\t\t\t\"%{LOG_HEADER}%{SPACE}((\\[%{INDEXNAME:[elasticsearch][index.name]}\\]|\\[%{INDEXNAME:[elasticsearch][index][name]}\\/%{DATA:[elasticsearch][index][id]}\\]))?%{SPACE}%{GREEDYMULTILINE:message}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t\t\"INDEXNAME\" => \"[a-zA-Z0-9_.-]*\"\r\n\t\t\t\t\"GC_ALL\" => \"\\[gc\\]\\[%{NUMBER:[elasticsearch][server][gc][overhead_seq]:int}\\] overhead, spent \\[%{NUMBER:[elasticsearch][server][gc][collection_duration][time]:float}%{DATA:[elasticsearch][server][gc][collection_duration][unit]}\\] collecting in the last \\[%{NUMBER:[elasticsearch][server][gc][observation_duration][time]:float}%{DATA:[elasticsearch][server][gc][observation_duration][unit]}\\]\"\r\n\t\t\t\t\"GC_YOUNG\" => \"\\[gc\\]\\[young\\]\\[%{NUMBER:[elasticsearch][server][gc][young][one]:int}\\]\\[%{NUMBER:[elasticsearch][server][gc][young][two]:int}\\]%{SPACE}%{GREEDYMULTILINE:message}\"\r\n\t\t\t\t\"LOG_HEADER\" => \"\\[%{TIMESTAMP_ISO8601:[elasticsearch][server][timestamp]}\\]\\[%{LOGLEVEL:[log][level]}%{SPACE}?\\]\\[%{DATA:[elasticsearch][server][component]}%{SPACE}\\](%{SPACE})?(\\[%{DATA:[elasticsearch][node][name]}\\])?(%{SPACE})?\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[elasticsearch][server][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[elasticsearch][server][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[elasticsearch][server][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\tremove_field => \"[elasticsearch][server][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"slowlog\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"\\[%{TIMESTAMP_ISO8601:[elasticsearch][slowlog][timestamp]}\\]\\[%{WORD:[log][level]}(%{SPACE})?\\]\\[%{DATA:[elasticsearch][slowlog][logger]}\\]%{SPACE}\\[%{WORD:[elasticsearch][node][name]}\\](%{SPACE})?(\\[%{INDEXNAME:[elasticsearch][index][name]}\\]\\[%{NUMBER:[elasticsearch][shard][id]:int}\\])?(%{SPACE})?(\\[%{INDEXNAME:[elasticsearch][index][name]}\\/%{DATA:[elasticsearch][index][id]}\\])?(%{SPACE})?%{SPACE}(took\\[%{DATA:[elasticsearch][slowlog][took]}\\],)?%{SPACE}(took_millis\\[%{NUMBER:[elasticsearch][slowlog][took_millis]:int}\\],)?%{SPACE}(type\\[%{DATA:[elasticsearch][slowlog][type]}\\],)?%{SPACE}(id\\[%{DATA:[elasticsearch][slowlog][id]}\\],)?%{SPACE}(routing\\[%{DATA:[elasticsearch][slowlog][routing]}\\],)?%{SPACE}(total_hits\\[%{NUMBER:[elasticsearch][slowlog][total_hits]:int}\\],)?%{SPACE}(types\\[%{DATA:[elasticsearch][slowlog][types]}\\],)?%{SPACE}(stats\\[%{DATA:[elasticsearch][slowlog][stats]}\\],)?%{SPACE}(search_type\\[%{DATA:[elasticsearch][slowlog][search_type]}\\],)?%{SPACE}(total_shards\\[%{NUMBER:[elasticsearch][slowlog][total_shards]:int}\\],)?%{SPACE}(source\\[%{GREEDYMULTILINE:[elasticsearch][slowlog][source_query]}\\])?,?%{SPACE}(extra_source\\[%{DATA:[elasticsearch][slowlog][extra_source]}\\])?,?\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t\t\"INDEXNAME\" => \"[a-zA-Z0-9_.-]*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[elasticsearch][slowlog][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[elasticsearch][slowlog][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[elasticsearch][slowlog][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\tremove_field => \"[elasticsearch][slowlog][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"osquery\" {\r\n\tif [fileset][name] == \"result\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tif [json][unixTime] {\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[json][unixTime]\", \"UNIX\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [json] {\r\n\t\t\tmutate {\r\n\t\t\t\tcopy => { \"json\" => \"[osquery][result]\" }\r\n\t\t\t\tremove_field => \"[json]\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tmutate {\r\n\t\t\tremove_field => \"[json]\"\r\n\t\t}\r\n\t\tif [osquery][result][hostIdentifier] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[osquery][result][hostIdentifier]\" => \"[osquery][result][host_identifier]\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [osquery][result][unixTime] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[osquery][result][unixTime]\" => \"[osquery][result][unix_time]\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [osquery][result][calendarTime] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[osquery][result][calendarTime]\" => \"[osquery][result][calendar_time]\" }\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"mongodb\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"%{TIMESTAMP_ISO8601:[mongodb][log][timestamp]}%{SPACE}%{MONGO3_SEVERITY:[mongodb][log][severity]}%{SPACE}%{MONGO3_COMPONENT:[mongodb][log][component]}%{SPACE}(?:\\[%{DATA:[mongodb][log][context]}\\])?%{SPACE}%{GREEDYDATA:[mongodb][log][message]}\" ]\r\n\t\t\t}\r\n            pattern_definitions => {\r\n\t\t\t\tMONGO3_SEVERITY => \"\\w\"\r\n\t\t\t\tMONGO3_COMPONENT => \"%{WORD}|-\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[mongodb][log][timestamp]\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZZ\" ]\r\n\t\t\t\tremove_field => \"[mongodb][log][timestamp]\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"haproxy\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{HAPROXY_DATE:[haproxy][request_date]} %{IPORHOST:[haproxy][source]} %{PROG:[haproxy][process_name]}(?:\\[%{POSINT:[haproxy][pid]:int}\\])?: %{GREEDYDATA} %{IPORHOST:[haproxy][client][ip]}:%{POSINT:[haproxy][client][port]:int} %{WORD} %{IPORHOST:[haproxy][destination][ip]}:%{POSINT:[haproxy][destination][port]:int} \\(%{WORD:[haproxy][frontend_name]}/%{WORD:[haproxy][mode]}\\)\",\r\n\t\t\t\t\"(%{NOTSPACE:[haproxy][process_name]}\\[%{NUMBER:[haproxy][pid]:int}\\]: )?%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port]:int} \\[%{NOTSPACE:[haproxy][request_date]}\\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][http][request][time_wait_ms]:int}/%{NUMBER:[haproxy][total_waiting_time_ms]:int}/%{NUMBER:[haproxy][connection_wait_time_ms]:int}/%{NUMBER:[haproxy][http][request][time_wait_without_data_ms]:int}/%{NUMBER:[haproxy][http][request][time_active_ms]:int} %{NUMBER:[haproxy][http][response][status_code]:int} %{NUMBER:[haproxy][bytes_read]:int} %{NOTSPACE:[haproxy][http][request][captured_cookie]} %{NOTSPACE:[haproxy][http][response][captured_cookie]} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active]:int}/%{NUMBER:[haproxy][connections][frontend]:int}/%{NUMBER:[haproxy][connections][backend]:int}/%{NUMBER:[haproxy][connections][server]:int}/%{NUMBER:[haproxy][connections][retries]:int} %{NUMBER:[haproxy][server_queue]:int}/%{NUMBER:[haproxy][backend_queue]:int} (\\{%{DATA:[haproxy][http][request][captured_headers]}\\} \\{%{DATA:[haproxy][http][response][captured_headers]}\\} |\\{%{DATA}\\} )?\\\"%{GREEDYDATA:[haproxy][http][request][raw_request_line]}\\\"\",\r\n\t\t\t\t\"(%{NOTSPACE:[haproxy][process_name]}\\[%{NUMBER:[haproxy][pid]:int}\\]: )?%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port]:int} \\[%{NOTSPACE:[haproxy][request_date]}\\] %{NOTSPACE:[haproxy][frontend_name]}/%{NOTSPACE:[haproxy][bind_name]} %{GREEDYDATA:[haproxy][error_message]}\",\r\n\t\t\t\t\"%{HAPROXY_DATE} %{IPORHOST:[haproxy][source]} (%{NOTSPACE:[haproxy][process_name]}\\[%{NUMBER:[haproxy][pid]:int}\\]: )?%{IP:[haproxy][client][ip]}:%{NUMBER:[haproxy][client][port]:int} \\[%{NOTSPACE:[haproxy][request_date]}\\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][total_waiting_time_ms]:int}/%{NUMBER:[haproxy][connection_wait_time_ms]:int}/%{NUMBER:[haproxy][tcp][processing_time_ms]:int} %{NUMBER:[haproxy][bytes_read]:int} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections.active]:int}/%{NUMBER:[haproxy][connections][frontend]:int}/%{NUMBER:[haproxy][connections][backend]:int}/%{NUMBER:[haproxy][connections][server]:int}/%{NUMBER:[haproxy][connections][retries]:int} %{NUMBER:[haproxy][server_queue]:int}/%{NUMBER:[haproxy][backend_queue]:int}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"HAPROXY_DATE\" => \"(%{MONTHDAY}[/-]%{MONTH}[/-]%{YEAR}:%{HOUR}:%{MINUTE}:%{SECOND})|%{SYSLOGTIMESTAMP}\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[haproxy][request_date]\", \"dd/MMM/yyyy:HH:mm:ss.SSS\", \"MMM dd HH:mm:ss\" ]\r\n\t\t\t\tremove_field => \"[haproxy][request_date]\"\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n#\t\t\tgeoip {\r\n#\t\t\t\tsource => \"[haproxy][client][ip]\"\r\n#\t\t\t\ttarget => \"[haproxy][geoip]\"\r\n#\t\t\t}\r\n\t\t\tif [haproxy][http][request][captured_headers] {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\tsplit => { \"[haproxy][http][request][captured_headers]\" => \"\\|\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [haproxy][http][response][captured_headers] {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\tsplit => { \"[haproxy][http][response][captured_headers]\" => \"\\|\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"icinga\" {\r\n\tif [fileset][name] == \"debug\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"\\[%{TIMESTAMP:[icinga][debug][timestamp]}\\] %{WORD:[icinga][debug][severity]}/%{WORD:[icinga][debug][facility]}: %{GREEDYMULTILINE:[icinga][debug][message]}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"TIMESTAMP\" => \"%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND} %{ISO8601_TIMEZONE}\"\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[icinga][debug][timestamp]\", \"yyyy-MM-dd HH:mm:ss Z\" ]\r\n\t\t\t\tremove_field => \"[icinga][debug][timestamp]\"\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"main\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"\\[%{TIMESTAMP:[icinga][main][timestamp]}\\] %{WORD:[icinga][main][severity]}/%{WORD:[icinga][main][facility]}: %{GREEDYMULTILINE:[icinga][main][message]}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"TIMESTAMP\" => \"%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND} %{ISO8601_TIMEZONE}\"\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[icinga][main][timestamp]\", \"yyyy-MM-dd HH:mm:ss Z\" ]\r\n\t\t\t\tremove_field => \"[icinga][main][timestamp]\"\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"startup\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"%{WORD:[icinga][startup][severity]}/%{WORD:[icinga][startup][facility]}: %{GREEDYMULTILINE:[icinga][startup][message]}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"iis\" {\r\n\tif [fileset][name] == \"access\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [\r\n\t\t\t\t\"%{TIMESTAMP_ISO8601:[iis][access][time]} %{IPORHOST:[iis][access][server_ip]} %{WORD:[iis][access][method]} %{URIPATHWITHBRACKET:[iis][access][url]} %{NOTSPACE:[iis][access][query_string]} %{NUMBER:[iis][access][port]:int} %{NOTSPACE:[iis][access][user_name]} %{IPORHOST:[iis][access][remote_ip]} %{NOTSPACE:[iis][access][agent]} %{NOTSPACE:[iis][access][referrer]} %{NUMBER:[iis][access][response_code]:int} %{NUMBER:[iis][access][sub_status]:int} %{NUMBER:[iis][access][win32_status]:int} %{NUMBER:[iis][access][request_time_ms]:float}\",\r\n\t\t\t\t\"%{TIMESTAMP_ISO8601:[iis][access][time]} %{NOTSPACE:[iis][access][site_name]} %{WORD:[iis][access][method]} %{URIPATH:[iis][access][url]} %{NOTSPACE:[iis][access][query_string]} %{NUMBER:[iis][access][port]:int} %{NOTSPACE:[iis][access][user_name]} %{IPORHOST:[iis][access][remote_ip]} %{NOTSPACE:[iis][access][agent]} %{NOTSPACE:[iis][access][cookie]} %{NOTSPACE:[iis][access][referrer]} %{NOTSPACE:[iis][access][hostname]} %{NUMBER:[iis][access][response_code]:int} %{NUMBER:[iis][access][sub_status]:int} %{NUMBER:[iis][access][win32_status]:int} %{NUMBER:[iis][access][body_sent][bytes]:int} %{NUMBER:[iis][access][body_received][bytes]:int} %{NUMBER:[iis][access][request_time_ms]:float}\",\r\n\t\t\t\t\"%{TIMESTAMP_ISO8601:[iis][access][time]} %{NOTSPACE:[iis][access][site_name]} %{NOTSPACE:[iis][access][server_name]} %{IPORHOST:[iis][access][server_ip]} %{WORD:[iis][access][method]} %{URIPATH:[iis][access][url]} %{NOTSPACE:[iis][access][query_string]} %{NUMBER:[iis][access][port]:int} %{NOTSPACE:[iis][access][user_name]} %{IPORHOST:[iis][access][remote_ip]} HTTP/%{NUMBER:[iis][access][http_version]:float} %{NOTSPACE:[iis][access][agent]} %{NOTSPACE:[iis][access][cookie]} %{NOTSPACE:[iis][access][referrer]} %{NOTSPACE:[iis][access][hostname]} %{NUMBER:[iis][access][response_code]:int} %{NUMBER:[iis][access][sub_status]:int} %{NUMBER:[iis][access][win32_status]:int} %{NUMBER:[iis][access][body_sent][bytes]:int} %{NUMBER:[iis][access][body_received][bytes]:int} %{NUMBER:[iis][access][request_time_ms]:float}\",\r\n\t\t\t\t\"%{TIMESTAMP_ISO8601:[iis][access][time]} \\[%{IPORHOST:[iis][access][server_ip]}\\]\\(http://%{IPORHOST:[iis][access][server_ip]}\\) %{WORD:[iis][access][method]} %{URIPATH:[iis][access][url]} %{NOTSPACE:[iis][access][query_string]} %{NUMBER:[iis][access][port]:int} %{NOTSPACE:[iis][access][user_name]} \\[%{IPORHOST:[iis][access][remote_ip]}\\]\\(http://%{IPORHOST:[iis][access][remote_ip]}\\) %{NOTSPACE:[iis][access][agent]} %{NUMBER:[iis][access][response_code]:int} %{NUMBER:[iis][access][sub_status]:int} %{NUMBER:[iis][access][win32_status]:int} %{NUMBER:[iis][access][request_time_ms]:float}\",\r\n\t\t\t\t\"%{TIMESTAMP_ISO8601:[iis][access][time]} %{IPORHOST:[iis][access][server_ip]} %{WORD:[iis][access][method]} %{URIPATH:[iis][access][url]} %{NOTSPACE:[iis][access][query_string]} %{NUMBER:[iis][access][port]:int} %{NOTSPACE:[iis][access][user_name]} %{IPORHOST:[iis][access][remote_ip]} %{NOTSPACE:[iis][access][agent]} %{NUMBER:[iis][access][response_code]:int} %{NUMBER:[iis][access][sub_status]:int} %{NUMBER:[iis][access][win32_status]:int} %{NUMBER:[iis][access][request_time_ms]:float}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"URIPATHWITHBRACKET\" => \"(?:/[A-Za-z0-9$.+!*'(){},~:;=@#%&_\\-\\[\\]]*)+\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[iis][access][time]\", \"yyyy-MM-dd HH:mm:ss\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[iis][access][time]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[iis][access][time]\", \"yyyy-MM-dd HH:mm:ss\" ]\r\n\t\t\t\t\tremove_field => \"[iis][access][time]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif [iis][access][agent] {\r\n\t\t\t\tuseragent {\r\n\t\t\t\t\tsource => \"[iis][access][agent]\"\r\n\t\t\t\t\ttarget => \"[iis][access][user_agent]\"\r\n\t\t\t\t}\r\n\t\t\t\tmutate {\r\n\t\t\t\t\trename => { \"[iis][access][agent]\" => \"[iis][access][user_agent][original]\" }\r\n\t\t\t\t}\r\n\t\t\t}\r\n#\t\t\tif [iis][access][remote_ip] {\r\n#\t\t\t\tgrok {\r\n#\t\t\t\t\tmatch => { \"[iis][access][remote_ip]\" => [ \"%{NOZONEIP:[iis][access][remote_ip_geoip]}\" ] }\r\n#\t\t\t\t\tpattern_definitions => { \"NOZONEIP\" => \"[^%]*\" }\r\n#\t\t\t\t}\r\n#\t\t\t\tgeoip {\r\n#\t\t\t\t\tsource => \"[iis][access][remote_ip_geoip]\"\r\n#\t\t\t\t\ttarget => \"[iis][access][geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t\tmutate {\r\n#\t\t\t\t\tremove_field => \"[iis][access][remote_ip_geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"error\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"%{TIMESTAMP_ISO8601:[iis][error][time]} %{IPORHOST:[iis][error][remote_ip]} %{NUMBER:[iis][error][remote_port]:int} %{IPORHOST:[iis][error][server_ip]} %{IPORHOST:[iis][error][server_port]:int} (?:HTTP/%{NUMBER:[iis][error][http_version]:float}|-) (?:%{WORD:[iis][error][method]}|-) (?:%{URIPATHPARAM:[iis][error][url]}|-)(?: -)? (?:%{NUMBER:[iis][error][response_code]:int}|-) (?:%{NUMBER}|-) (?:%{NOTSPACE:[iis][error][reason_phrase]}|-) (?:%{NOTSPACE:[iis][error][queue_name]}|-)\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[iis][error][time]\", \"yyyy-MM-dd HH:mm:ss\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[iis][error][time]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[iis][error][time]\", \"yyyy-MM-dd HH:mm:ss\" ]\r\n\t\t\t\t\tremove_field => \"[iis][error][time]\"\t\r\n\t\t\t\t}\r\n\t\t\t}\r\n#\t\t\tif [iis][error][remote_ip] {\r\n#\t\t\t\tgrok {\r\n#\t\t\t\t\tmatch => { \"[iis][error][remote_ip]\" => [ \"%{NOZONEIP:[iis][access][remote_ip_geoip]}\" ] }\r\n#\t\t\t\t\tpattern_definitions => { \"NOZONEIP\" => \"[^%]*\" }\r\n#\t\t\t\t}\r\n#\t\t\t\tgeoip {\r\n#\t\t\t\t\tsource => \"[iis][error][remote_ip_geoip]\"\r\n#\t\t\t\t\ttarget => \"[iis][error][geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t\tmutate {\r\n#\t\t\t\t\tremove_field => \"[iis][error][remote_ip_geoip]\"\r\n#\t\t\t\t}\r\n#\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"redis\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \r\n\t\t\t\t\"(%{POSINT:[redis][log][pid]:int}:%{CHAR:[redis][log][role]} )?(%{REDISTIMESTAMP1:[redis][log][timestamp]}||%{REDISTIMESTAMP2:[redis][log][timestamp]}) %{REDISLEVEL:[redis][log][level]} %{GREEDYDATA:[redis][log][message]}\",\r\n\t\t\t\t\"%{POSINT:[redis][log][pid]:int}:signal-handler \\(%{POSINT:[redis][log][timestamp]}\\) %{GREEDYDATA:[redis][log][message]}\" ]\r\n\t\t\t}\r\n\t\t\tpattern_definitions => {\r\n\t\t\t\t\"CHAR\" => \"[a-zA-Z]\"\r\n\t\t\t\t\"REDISLEVEL\" => \"[.\\-*#]\"\r\n\t\t\t\t\"REDISTIMESTAMP1\" => \"%{MONTHDAY} %{MONTH} %{TIME}\"\r\n\t\t\t\t\"REDISTIMESTAMP2\" => \"%{MONTHDAY} %{MONTH} %{YEAR} %{TIME}\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[redis][log][timestamp]\", \"dd MMM yyyy H:m:s.SSS\", \"dd MMM H:m:s.SSS\", \"dd MMM H:m:s\", \"UNIX\" ]\r\n\t\t\t\tremove_field => \"[redis][log][timestamp]\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"postgresql\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"^%{LOCALDATETIME:[postgresql][log][timestamp]} %{WORD:[postgresql][log][timezone]} \\[%{NUMBER:[postgresql][log][thread_id]:int}(-%{BASE16FLOAT:[postgresql][log][core_id]:float})?\\] ((\\[%{USERNAME:[postgresql][log][user]}\\]@\\[%{POSTGRESQL_DB_NAME:[postgresql][log][database]}\\]|%{USERNAME:[postgresql][log][user]}@%{POSTGRESQL_DB_NAME:[postgresql][log][database]}) )?%{WORD:[postgresql][log][level]}:  (duration: %{NUMBER:[postgresql][log][duration]:float} ms  statement: %{GREEDYDATA:[postgresql][log][query]}|%{GREEDYDATA:[postgresql][log][message]})\" ]\r\n\t\t\t}\r\n            pattern_definitions => {\r\n\t\t\t\t\"LOCALDATETIME\" => \"[-0-9]+ %{TIME}\"\r\n\t\t\t\t\"GREEDYDATA\" => \"(.|\\n|\\t)*\"\r\n\t\t\t\t\"POSTGRESQL_DB_NAME\" => \"[a-zA-Z0-9_]+[a-zA-Z0-9_\\$]*\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[postgresql][log][timestamp]\", \"yyyy-MM-dd HH:mm:ss.SSS\", \"yyyy-MM-dd HH:mm:ss\" ]\r\n\t\t\t\tremove_field => \"[postgresql][log][timestamp]\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"traefik\" {\r\n\tif [fileset][name] == \"access\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"[traefik][access][message]\" => [ \"(?:%{NUMBER:[traefik][access][body_sent][bytes]:int}|-)( (?:\\\"%{DATA:[traefik][access][referrer]}\\\"|-)?( (?:\\\"%{DATA:[traefik][access][agent]}\\\"|-)?)?( (?:%{NUMBER:[traefik][access][request_count]:int}|-)?)?( (?:\\\"%{DATA:[traefik][access][frontend_name]}\\\"|-)?)?( \\\"%{DATA:[traefik][access][backend_url]}\\\")?( %{NUMBER:[traefik][access][duration]:int}ms)?)?\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"message\", \"[traefik][access][message]\" ]\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[traefik][access][time]\", \"dd/MMM/yyyy:H:m:s Z\" ]\r\n\t\t\t\tremove_field => \"[traefik][access][time]\"\r\n\t\t\t}\r\n\t\t\tuseragent {\r\n\t\t\t\tsource => \"[traefik][access][agent]\"\r\n\t\t\t\ttarget => \"[traefik][access][user_agent]\"\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[traefik][access][agent]\" => \"[traefik][access][user_agent][original]\" }\r\n\t\t\t}\r\n#\t\t\tgeoip {\r\n#\t\t\t\tsource => \"[traefik][access][remote_ip]\"\r\n#\t\t\t\ttarget => \"[traefik][access][geoip]\"\r\n#\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"kafka\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"(?m)%{TIMESTAMP_ISO8601:[kafka][log][timestamp]}. %{LOGLEVEL:[kafka][log][level]} +%{JAVALOGMESSAGE:[kafka][log][message]} \\(%{JAVACLASS:[kafka][log][class]}\\)$[ \\n]*(?'[kafka][log][trace][full]'.*)\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tgrok {\r\n\t\t\t\tmatch => { \"[kafka][log][message]\" => [ \"\\[%{KAFKA_COMPONENT:[kafka][log][component]}\\][,:.]? +%{JAVALOGMESSAGE:[kafka][log][message]}\" ] }\r\n\t\t\t\tpattern_definitions => { \"KAFKA_COMPONENT\" => \"[^\\]]*\" }\r\n\t\t\t\ttag_on_failure => [ \"_grokparsefailure_kafka_log_component\" ]\r\n\t\t\t}\r\n\t\t\tif (\"_grokparsefailure_kafka_log_component\" in [tags]) {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\tadd_field => { \"[kafka][log][component]\" => \"unknown\" }\r\n\t\t\t\t\tremove_tag => [ \"_grokparsefailure_kafka_log_component\" ]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tgrok {\r\n\t\t\t\tmatch => { \"[kafka][log][trace][full]\" => [ \"%{JAVACLASS:[kafka][log][trace][class]}:\\s*%{JAVALOGMESSAGE:[kafka][log][trace][message]}\" ] }\r\n\t\t\t\ttag_on_failure => [ \"_grokparsefailure_kafka_log_trace\" ]\r\n\t\t\t}\r\n\t\t\tif (\"_grokparsefailure_kafka_log_trace\" in [tags]) {\r\n\t\t\t\tmutate {\r\n\t\t\t\t\tremove_field => [ \"[kafka][log][trace]\" ]\r\n\t\t\t\t\tremove_tag => [ \"_grokparsefailure_kafka_log_trace\" ]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t}\r\n\t\t\tif [beat][timezone] {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[kafka][log][timestamp]\", \"yyyy-MM-dd HH:mm:ss,SSS\" ]\r\n\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\tremove_field => \"[kafka][log][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tdate {\r\n\t\t\t\t\tmatch => [ \"[kafka][log][timestamp]\", \"yyyy-MM-dd HH:mm:ss,SSS\" ]\r\n\t\t\t\t\tremove_field => \"[kafka][log][timestamp]\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"logstash\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"^%{CHAR:first_char}\" ] }\r\n\t\t\tpattern_definitions => { \"CHAR\" => \".\" }\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [first_char] == \"{\" {\r\n\t\t\t\tjson {\r\n\t\t\t\t\tsource => \"message\"\r\n\t\t\t\t\ttarget => \"[logstash][log]\"\r\n\t\t\t\t\tremove_field => \"message\"\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][log][timeMillis] {\r\n\t\t\t\t\tdate {\r\n\t\t\t\t\t\tmatch => [ \"[logstash][log][timeMillis]\", \"UNIX_MS\" ]\r\n\t\t\t\t\t\tremove_field => \"[logstash][log][timeMillis]\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][log][loggerName] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][log][loggerName]\" => \"[logstash][log][module]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][log][logEvent][message] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][log][logEvent][message]\" => \"message\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][log][logEvent] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][log][logEvent]\" => \"[logstash][log][log_event]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][log][level] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][log][level]\" => \"[log][leve]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgrok {\r\n\t\t\t\t\tmatch => { \"message\" => [ \"\\[%{TIMESTAMP_ISO8601:[logstash][log][timestamp]}\\]\\[%{LOGSTASH_LOGLEVEL:[logstash][log][level]}\\s?\\]\\[%{LOGSTASH_CLASS_MODULE:[logstash][log][module]}\\] %{GREEDYMULTILINE:[logstash][log][message]}\" ]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpattern_definitions => {\r\n\t\t\t\t\t\t\"LOGSTASH_CLASS_MODULE\" => \"[\\w\\.]+\\s*\"\r\n\t\t\t\t\t\t\"LOGSTASH_LOGLEVEL\" => \"INFO|ERROR|DEBUG|FATAL|WARN|TRACE\"\r\n\t\t\t\t\t\t\"GREEDYMULTILINE\" => \"(.|\\n)*\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif [beat][timezone] {\r\n\t\t\t\t\t\t\tdate {\r\n\t\t\t\t\t\t\tmatch => [ \"[logstash][log][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\t\t\tremove_field => \"[logstash][log][timestamp]\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\tdate {\r\n\t\t\t\t\t\t\tmatch => [ \"[logstash][log][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\t\t\tremove_field => \"[logstash][log][timestamp]\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"first_char\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t} else if [fileset][name] == \"slowlog\" {\r\n\t\tmutate {\r\n\t\t\tadd_field => { \"[event][created]\" => \"%{@timestamp}\" }\r\n\t\t}\r\n\t\tgrok {\r\n\t\t\tmatch => { \"message\" => [ \"^%{CHAR:first_char}\" ] }\r\n\t\t\tpattern_definitions => { \"CHAR\" => \".\" }\r\n\t\t}\r\n\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\tif [first_char] == \"{\" {\r\n\t\t\t\tjson {\r\n\t\t\t\t\tsource => \"message\"\r\n\t\t\t\t\ttarget => \"[logstash][slowlog]\"\r\n\t\t\t\t\tremove_field => \"message\"\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][timeMillis] {\r\n\t\t\t\t\tdate {\r\n\t\t\t\t\t\tmatch => [ \"[logstash][slowlog][timeMillis]\", \"UNIX_MS\" ]\r\n\t\t\t\t\t\tremove_field => \"[logstash][slowlog][timeMillis]\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][loggerName] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][slowlog][loggerName]\" => \"[logstash][slowlog][module]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][logEvent][took_in_millis] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][slowlog][logEvent][took_in_millis]\" => \"[logstash][slowlog][took_in_millis]\" }\r\n\t\t\t\t\t\tconvert => { \"[logstash][slowlog][took_in_millis]\" => \"integer\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][logEvent][took_in_nanos] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][slowlog][logEvent][took_in_nanos]\" => \"[event][duration]\" }\r\n\t\t\t\t\t\tconvert => { \"[event][duration]\" => \"integer\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][logEvent][event] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tcopy => { \"[logstash][slowlog][logEvent][event]\" => \"[logstash][slowlog][event]\" }\r\n\t\t\t\t\t\tremove_field => \"[logstash][slowlog][logEvent][event]\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][logEvent][plugin_params] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][slowlog][logEvent][plugin_params]\" => \"[logstash][slowlog][plugin_params_object]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][module] {\r\n\t\t\t\t\tgrok {\r\n\t\t\t\t\t\tmatch => { \"[logstash][slowlog][module]\" => [ \"slowlog.logstash.%{WORD:[logstash][slowlog][plugin_type]}.%{WORD:[logstash][slowlog][plugin_name]}\" ] }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tmutate {\r\n\t\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][logEvent] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tremove_field => [ \"[logstash][slowlog][logEvent]\" ]\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif [logstash][slowlog][level] {\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\trename => { \"[logstash][slowlog][level]\" => \"[log][leve]\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tgrok {\r\n\t\t\t\t\tmatch => { \"message\" => [ \"\\[%{TIMESTAMP_ISO8601:[logstash][slowlog][timestamp]}\\]\\[%{LOGSTASH_LOGLEVEL:[logstash][slowlog][level]}\\s?\\]\\[%{LOGSTASH_CLASS_MODULE:[logstash][slowlog][module]}\\] %{GREEDYDATA:[logstash][slowlog][message]}\" ]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpattern_definitions => {\r\n\t\t\t\t\t\t\"LOGSTASH_CLASS_MODULE\" => \"[\\w\\.]+\\s*\"\r\n\t\t\t\t\t\t\"LOGSTASH_LOGLEVEL\" => \"INFO|ERROR|DEBUG|FATAL|WARN|TRACE\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (\"_grokparsefailure\" not in [tags]) {\r\n\t\t\t\t\tgrok {\r\n\t\t\t\t\t\tmatch => { \"[logstash][slowlog][message]\" => [ \"{:plugin_params=>%{GREEDYDATA:[logstash][slowlog][plugin_params]}, :took_in_nanos=>%{NUMBER:[logstash][slowlog][took_in_nanos]:int}, :took_in_millis=>%{NUMBER:[logstash][slowlog][took_in_millis]:int}, :event=>%{GREEDYDATA:[logstash][slowlog][event]}}\" ]\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tremove_field => [ \"message\" ]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tmutate {\r\n\t\t\t\t\t\tadd_field => { \"read_timestamp\" => \"%{@timestamp}\" }\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif [beat][timezone] {\r\n\t\t\t\t\t\tdate {\r\n\t\t\t\t\t\t\tmatch => [ \"[logstash][slowlog][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\t\t\ttimezone => \"%{[beat][timezone]}\"\r\n\t\t\t\t\t\t\tremove_field => \"[logstash][slowlog][timestamp]\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else { \r\n\t\t\t\t\t\tdate {\r\n\t\t\t\t\t\t\tmatch => [ \"[logstash][slowlog][timestamp]\", \"ISO8601\" ]\r\n\t\t\t\t\t\t\tremove_field => \"[logstash][slowlog][timestamp]\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tmutate {\r\n\t\t\t\tremove_field => [ \"first_char\" ]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n} else if [fileset][module] == \"kibana\" {\r\n\tif [fileset][name] == \"log\" {\r\n\t\tif [json] {\r\n\t\t\t mutate {\r\n\t\t\t\tcopy => { \"json\" => \"[kibana][log][meta]\" }\r\n\t\t\t\tremove_field => \"[json]\"\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][@timestamp] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][@timestamp]\" => \"read_timestamp\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][message] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][message]\" => \"message\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][state] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][state]\" => \"[kibana][log][state]\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][pid] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][pid]\" => \"[process][pid]\" }\r\n\t\t\t\tconvert => { \"[process][pid]\" => \"integer\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][tags] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][tags]\" => \"[kibana][log][tags]\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][res][statusCode] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][res][statusCode]\" => \"[http][response][status_code]\" }\r\n\t\t\t\tconvert => { \"[http][response][status_code]\" => \"integer\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][res][responseTime] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][res][responseTime]\" => \"[http][response][elapsed_time]\" }\r\n\t\t\t\tconvert => { \"[http][response][elapsed_time]\" => \"integer\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][res][contentLength] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][res][contentLength]\" => \"[http][response][content_length]\" }\r\n\t\t\t\tconvert => { \"[http][response][content_length]\" => \"integer\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [kibana][log][meta][req][method] {\r\n\t\t\tmutate {\r\n\t\t\t\trename => { \"[kibana][log][meta][req][method]\" => \"[http][request][method]\" }\r\n\t\t\t}\r\n\t\t}\r\n\t\tif [read_timestamp] {\r\n\t\t\tdate {\r\n\t\t\t\tmatch => [ \"[read_timestamp]\", \"ISO8601\" ]\t\t\r\n\t\t\t}\r\n\t\t}\r\n\t\tmutate {\r\n\t\t\tmerge => { \"[service][name]\" => \"kibana\" }\r\n\t\t}\r\n\t}\r\n}\r\nif [host][name] {\r\n\tmutate {\r\n\t\trename => [\"host\", \"beat\" ]\r\n\t\tadd_field => { \"host\" => \"%{[beat][name]}\" }\r\n\t}\r\n}\r\nif [@version] {\r\n\tmutate {\r\n\t\tremove_field => [ \"@version\" ] \r\n\t}\r\n}",
        patterns: '',
        documentation: 'https://docs.ovh.com/gb/en/mobile-hosting/logs-data-platform/filebeat-logs/',
      },
      HAProxy: {
        name: 'HAProxy',
        input: 'tcp {\n\tport => INPUT_PORT\n\ttype => haproxy\n\tssl_enable => true\n\tssl_verify => false\n\tssl_extra_chain_certs => ["/etc/ssl/private/ca.crt"]\n\tssl_cert => "/etc/ssl/private/server.crt"\n\tssl_key => "/etc/ssl/private/server.key"\n}',
        filter: 'if [type] == "haproxy" {\n\tgrok {\n\t\tmatch => [ "message", "%{OVHHAPROXYHTTP}" ]\n\t\tpatterns_dir => "/opt/logstash/patterns"\n\t\tnamed_captures_only => true\n\t}\n\tif ("_grokparsefailure" in [tags]) {\n\t\tmutate {\n\t\t\tremove_tag => [ "_grokparsefailure" ]\n\t\t}\n\t\tgrok {\n\t\t\tmatch => [ "message", "%{OVHHAPROXYTCP}" ]\n\t\t\tpatterns_dir => "/opt/logstash/patterns"\n\t\t\tnamed_captures_only => true\n\t\t}\n\t}\n\tif ("_grokparsefailure" in [tags]) {\n\t\tmutate {\n\t\t\tremove_tag => [ "_grokparsefailure" ]\n\t\t}\n\t\tgrok {\n\t\t\tmatch => [ "message", "%{OVHHAPROXYERROR}" ]\n\t\t\tpatterns_dir => "/opt/logstash/patterns"\n\t\t\tnamed_captures_only => true\n\t\t}\n\t}\n\tif !("_grokparsefailure" in [tags]) {\n\t\tdate {\n\t\t\tlocale => "en"\n\t\t\tmatch => [ "accept_date", "dd/MMM/YYYY:HH:mm:ss.SSS", "ISO8601"]\n\t\t\ttimezone => "Europe/Paris"\n\t\t\ttarget => "accept_date"\n\t\t}\n\t\tdate {\n\t\t\tmatch => [ "timestamp8601_date", "ISO8601" ]\n\t\t\ttimezone => "Europe/Paris"\n\t\t\ttarget => "@timestamp"\n\t\t}\n\t}\n}',
        patterns: 'OVHHAPROXYTIME (?!<[0-9])%{HOUR:haproxy_hour_int:int}:%{MINUTE:haproxy_minute_int:int}(?::%{SECOND:haproxy_second_int:int})(?![0-9])\nOVHHAPROXYDATE %{MONTHDAY:haproxy_monthday_int:int}/%{MONTH:haproxy_month}/%{YEAR:haproxy_year_int:int}:%{OVHHAPROXYTIME:haproxy_time}.%{INT:haproxy_milliseconds:int}\nOHVSYSLOGHEAD <%{NONNEGINT:facility:int}.%{NONNEGINT:severity:int}>\nOVHHAPROXYHEAD (?:%{SYSLOGTIMESTAMP:syslog_timestamp}|%{TIMESTAMP_ISO8601:timestamp8601_date}) %{IPORHOST:syslog_server} %{SYSLOGPROG}:\nOVHHAPROXYHTTPBASE %{IP:client_ip}:%{INT:client_port_int:int} \\[%{OVHHAPROXYDATE:accept_date}\\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_request_int:int}/%{INT:time_queue_int:int}/%{INT:time_backend_connect_int:int}/%{INT:time_backend_response_int:int}/%{NOTSPACE:time_duration_int:int} %{INT:http_status_code_int:int} %{NOTSPACE:bytes_read_int:int} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{INT:actconn_int:int}/%{INT:feconn_int:int}/%{INT:beconn_int:int}/%{INT:srvconn_int:int}/%{NOTSPACE:retries_int:int} %{INT:srv_queue_int:int}/%{INT:backend_queue_int:int} (\\{%{HAPROXYCAPTUREDREQUESTHEADERS}\\})?( )?(\\{%{HAPROXYCAPTUREDRESPONSEHEADERS}\\})?( )?"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?"\nOVHHAPROXYHTTP %{OVHHAPROXYHEAD} %{OVHHAPROXYHTTPBASE}\nOVHHAPROXYTCP %{OVHHAPROXYHEAD} %{IP:client_ip}:%{INT:client_port_int:int} \\[%{OVHHAPROXYDATE:accept_date}\\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{INT:time_queue_int:int}/%{INT:time_backend_connect_int:int}/%{NOTSPACE:time_duration_int:int} %{NOTSPACE:bytes_read_int:int} %{NOTSPACE:termination_state} %{INT:actconn_int:int}/%{INT:feconn_int:int}/%{INT:beconn_int:int}/%{INT:srvconn_int:int}/%{NOTSPACE:retries_int:int} %{INT:srv_queue_int:int}/%{INT:backend_queue_int:int}\nOVHHAPROXYERROR %{OVHHAPROXYHEAD} %{IP:client_ip}:%{INT:client_port_int:int} \\[%{OVHHAPROXYDATE:accept_date}\\] %{NOTSPACE:frontend_name}/%{NOTSPACE:bind_name}: %{GREEDYDATA:error_message}',
        documentation: 'https://docs.ovh.com/gb/en/mobile-hosting/logs-data-platform/haproxy/',
      },
      Twitter: {
        name: 'Twitter',
        input: 'twitter {\n\tconsumer_key => "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"\n\tconsumer_secret => "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXx"\n\toauth_token => "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"\n\toauth_token_secret => "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"\n\tkeywords => [ "ovh","kimsufi","soyoustart"]\n\ttype => "tweet"\n\tfull_tweet => true\n}',
        filter: 'if [type] == "tweet" {\n\n\tmutate {\n\t\tadd_field => {\n\t\t\t"message" => "%{text}"\n\t\t\t"full_message" => "%{text}"\n\t\t\t"hashtags" => "%{[entities][hashtags]}"\n\t\t\t"mentions" =>  "%{[entities][user_mentions]}"\n\t\t\t"host" => "twitter"\n\t\t\t"tweet_url" => "https://twitter.com/%{[user][screen_name]}/status/%{id_str}"\n\t\t\t"user_screen_name" => "%{[user][screen_name]}"\n\t\t\t"user_id" => "%{[user][id_str]}"\n\t\t\t"user_followers_count_int" => "%{[user][followers_count]}"\n\t\t\t"user_friends_count_int" => "%{[user][friends_count]}"\n\t\t\t"user_listed_count_int" => "%{[user][listed_count]}"\n\t\t\t"user_favourites_count_int" => "%{[user][favourites_count]}"\n\t\t\t"user_statuses_count_int" => "%{[user][statuses_count]}"\n\t\t\t"user_profile_image_url" => "%{[user][profile_image_url_https]}"\n\t\t\t"user_verified_bool" => "%{[user][verified]}"\n\t\t}\n\t\tremove_field => ["timestamp_ms"]\n\t}\n\n\tif [user][profile_banner_url] {\n\t\tmutate {\n\t\t\tadd_field => {\n\t\t\t\t"user_profile_banner_url" => "%{[user][profile_banner_url]}"\n\t\t\t}\n\t\t}\n\t}\n\n\tif [entities][user_mentions] and [type] == "tweet" {\n\t\tclone {\n\t\t\tclones => ["mention"]\n\t\t}\n\t}\n\n\tif [entities][hashtags]  and [type] == "tweet" {\n\t\tclone {\n\t\t\tclones => ["hashtag"]\n\t\t}\n\t}\n\n}\n\nif [type] == "hashtag" {\n\n\tsplit {\n\t\tfield => "[entities][hashtags]"\n\t}\n\n\tmutate {\n\t\tadd_field => {\n\t\t\t"hashtag" =>  "%{[entities][hashtags][text]}"\n\t\t\t"indice_begin_int" =>  "%{[entities][hashtags][indices][0]}"\n\t\t\t"indice_end_int" =>  "%{[entities][hashtags][indices][1]}"\n\t\t}\n\t\tremove_field => [ "retweet_count", "retweeted_status", "user", "text", "filter_level", "favorite_count", "extended_tweet", "entities"]\n\t\tupdate => {\n\t\t\t"message" => "#%{[entities][hashtags][text]}"\n\t\t}\n\t}\n\n}\n\nif [type] == "mention" {\n\n\tsplit {\n\t\tfield => "[entities][user_mentions]"\n\t}\n\n\tmutate {\n\t\tadd_field => {\n\t\t\t"mention" =>  "%{[entities][user_mentions][screen_name]}"\n\t\t\t"mention_user_id_" =>  "%{[entities][user_mentions][id]}"\n\t\t\t"indice_begin_int" =>  "%{[entities][user_mentions][indices][0]}"\n\t\t\t"indice_end_int" =>  "%{[entities][user_mentions][indices][1]}"\n\t\t}\n\t\tremove_field => [ "retweet_count", "retweeted_status", "user", "text", "filter_level", "favorite_count", "extended_tweet", "entities"]\n\t\tupdate => {\n\t\t\t"message" => "@%{[entities][user_mentions][screen_name]}"\n\t\t}\n\t}\n\n}',
        patterns: '',
        documentation: 'https://docs.ovh.com/gb/en/mobile-hosting/logs-data-platform/twitter/',
      },
    },
});
