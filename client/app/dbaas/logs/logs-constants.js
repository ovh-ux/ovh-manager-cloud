/* eslint-disable no-useless-escape */
angular.module('managerApp').constant('LogsConstants', {
  COLDSTORAGE: 'COLDSTORAGE',
  DESCRIPTION_MIN_LENGTH: 3,
  EXPOSED_PORT_MIN: 514,
  EXPOSED_PORT_MAX: 65535,
  DISPLAY_NAME_MAX_LENGTH: 255,
  FAILURE: 'FAILURE',
  SUCCESS: 'SUCCESS',
  suffixPattern: '^[a-z0-9_-]+$',
  ORDER_URL: "/order/express/#/new/express/resume?products=~(~(planCode~'logs-basic~productId~'logs))",
  LOGS_DOCS_NAME: 'logs-data-platform',
  LOGS_PRODUCT_URL: '/data-platforms/logs/',
  ELASTICSEARCH_API_URL: 'ELASTICSEARCH_API',
  SERVICE_STATE_TO_CONFIG: 'TO_CONFIG',
  SERVICE_STATE_DISABLED: 'DISABLED',
  SERVICE_STATE_ENABLED: 'ENABLED',
  PASSWORD_SPECIAL_CHARACTERS: "!\"#$%&'()*+,-./:;<=>?@[]^_`{|}~",
  MESSAGE_THRESHOLD: 1000,
  WEB_SOCKET_URL: 'WEB_SOCKET',
  RFC_URL: 'TCP_TLS_RFC5424',
  LTSV_URL: 'TCP_TLS_LTSV_NUL',
  GELF_URL: 'TCP_TLS_GELF',
  GELF: 'GELF',
  LTSV: 'LTSV',
  RFC5424: 'RFC5424',
  GRAYLOG_WEBUI: 'GRAYLOG_WEBUI',
  X_OVH_TOKEN: 'X-OVH-TOKEN',
  GZIP: 'GZIP',
  DEFLATED: 'DEFLATED',
  LZMA: 'LZMA',
  ZSTD: 'ZSTD',
  PCA: 'PCA',
  PCS: 'PCS',
  CONTENT_ALL: 'ALL',
  CONTENT_PLAIN: 'PLAIN',
  CONTENT_GELF: 'GELF',
  LOGS_PRO: 'logs-pro',
  TITLE_MIN_LENGTH: 3,
  TITLE_MAX_LENGTH: 255,
  FIELD_MIN_LENGTH: 3,
  FIELD_MAX_LENGTH: 50,
  VALUE_MIN_LENGTH: 1,
  VALUE_MAX_LENGTH: 50,
  TIME_PERIOD_MIN_IN_SECONDS: 1,
  TIME_PERIOD_MAX_IN_SECONDS: 3600,
  THRESHOLD_MIN: 0,
  GRACE_PERIOD_MIN_IN_MINUTES: 1,
  GRACE_PERIOD_MAX_IN_MINUTES: 60,
  BACKLOG_MIN: 1,
  BACKLOG_MAX: 20,
  expirationInSeconds: 86400,
  indexStorage: {
    success: 'success',
    error: 'error',
    warning: 'warning',
  },
  alertType: {
    counter: 'MESSAGE_COUNT',
    numeric: 'FIELD_VALUE',
    textual: 'FIELD_CONTENT_VALUE',
  },
  thresholdType: {
    more: 'MORE',
    less: 'LESS',
    lower: 'LOWER',
    higher: 'HIGHER',
  },
  constraintType: {
    mean: 'MEAN',
    min: 'MIN',
    max: 'MAX',
    sum: 'SUM',
    sd: 'STDDEV',
  },
  state: {
    SEALED: 'sealed',
    UNSEALED: 'unsealed',
    UNSEALING: 'unsealing',
  },
  stateType: {
    sealed: 'info',
    unsealed: 'success',
    unsealing: 'warning',
  },
  URLS: {
    GRAYLOG_WEBUI: 'GRAYLOG_WEBUI',
    GRAYLOG_API: 'GRAYLOG_API',
    ELASTICSEARCH_API: 'ELASTICSEARCH_API',
  },
  PORT_TYPES: {
    TCP_TLS: 'TCP/TLS',
    TCP: 'TCP',
    UDP: 'UDP',
  },
  MESSAGE_TYPES: {
    GELF: 'Gelf',
    RFC5424: 'Syslog RFC5424',
    LTSV_LINE: 'LTSV line',
    LTSV_NUL: 'LTSV nul',
    CAP_N_PROTO: 'Cap’n’Proto',
  },
  URL_TYPES: {
    TCP_TLS_GELF: {
      PORT: 'TCP_TLS',
      MESSAGE: 'GELF',
    },
    TCP_GELF: {
      PORT: 'TCP',
      MESSAGE: 'GELF',
    },
    UDP_GELF: {
      PORT: 'UDP',
      MESSAGE: 'GELF',
    },
    TCP_TLS_RFC5424: {
      PORT: 'TCP_TLS',
      MESSAGE: 'RFC5424',
    },
    TCP_RFC5424: {
      PORT: 'TCP',
      MESSAGE: 'RFC5424',
    },
    UDP_RFC5424: {
      PORT: 'UDP',
      MESSAGE: 'RFC5424',
    },
    TCP_TLS_LTSV_LINE: {
      PORT: 'TCP_TLS',
      MESSAGE: 'LTSV_LINE',
    },
    TCP_LTSV_LINE: {
      PORT: 'TCP',
      MESSAGE: 'LTSV_LINE',
    },
    UDP_LTSV_LINE: {
      PORT: 'UDP',
      MESSAGE: 'LTSV_LINE',
    },
    TCP_TLS_LTSV_NUL: {
      PORT: 'TCP_TLS',
      MESSAGE: 'LTSV_NUL',
    },
    TCP_LTSV_NUL: {
      PORT: 'TCP',
      MESSAGE: 'LTSV_NUL',
    },
    UDP_LTSV_NUL: {
      PORT: 'UDP',
      MESSAGE: 'LTSV_NUL',
    },
    TCP_TLS_CAP_N_PROTO: {
      PORT: 'TCP_TLS',
      MESSAGE: 'CAP_N_PROTO',
    },
    TCP_CAP_N_PROTO: {
      PORT: 'TCP',
      MESSAGE: 'CAP_N_PROTO',
    },
    UDP_CAP_N_PROTO: {
      PORT: 'UDP',
      MESSAGE: 'CAP_N_PROTO',
    },
  },
  DATA_STORAGE: {
    TIME_PERIOD_MONTHS: 3,
    METRICS: {
      SUM: 'ldp.service.consumption.sum',
      COUNT: 'ldp.service.consumption.count',
      COLD_STORAGE_TOTAL: 'ldp.service.coldstorage.total',
    },
    AGGREGATORS: {
      ZIMSUM: 'zimsum',
    },
    DOWNSAMPLING_MODE: {
      '24H_MAX': '24h-avg-none',
    },
  },
  OFFER_STORAGE_MULTIPLIER: 1073741824,
  DATA_USAGE_GRAPH_CONFIGURATION: {
    options: {
      scales: {
        xAxes: [{
          gridLines: {
            display: false,
          },
        }],
        yAxes: [
          {
            id: 'y-axis-1',
            type: 'linear',
            display: true,
            position: 'left',
          },
          {
            id: 'y-axis-2',
            type: 'linear',
            display: true,
            position: 'right',
            gridLines: {
              display: false,
            },
          },
        ],
      },
      legend: {
        display: true,
        position: 'bottom',
        labels: {
          fontStyle: 'bold',
        },
      },
      tooltips: {
        backgroundColor: 'rgba(256,256,256,0.8)',
        titleFontColor: '#113f6d',
        bodyFontColor: '#113f6d',
        borderColor: '#bbbdbf',
        borderWidth: 1,
        position: 'nearest',
      },
    },
    colors: [
      {
        backgroundColor: 'rgba(89,210,239, 0.4)',
        pointBackgroundColor: 'transparent',
        pointHoverBackgroundColor: '#59d2ef',
        borderColor: '#59d2ef',
        pointBorderColor: 'transparent',
        pointHoverBorderColor: '#fff',
      }, {
        backgroundColor: 'transparent',
        pointBackgroundColor: 'transparent',
        pointHoverBackgroundColor: '#113f6d',
        borderColor: '#113f6d',
        pointBorderColor: 'transparent',
        pointHoverBorderColor: '#fff',
      }, {
        backgroundColor: 'transparent',
        pointBackgroundColor: 'transparent',
        pointHoverBackgroundColor: 'transparent',
        borderColor: '#ff9803',
        pointBorderColor: 'transparent',
        pointHoverBorderColor: 'transparent',
      },
    ],
    datasetOverride: [{ yAxisID: 'y-axis-1' }, { yAxisID: 'y-axis-2' }, { yAxisID: 'y-axis-1' }],
  },
  inputStatus: {
    PROCESSING: 'PROCESSING',
    INIT: 'INIT',
    PENDING: 'PENDING',
    RUNNING: 'RUNNING',
  },
  inputState: {
    PROCESSING: 'processing',
    RESTART_REQUIRED: 'restart_required',
    TO_CONFIGURE: 'to_configure',
    PENDING: 'pending',
    RUNNING: 'running',
    UNKNOWN: 'unknown',
  },
  inputStateType: {
    processing: 'info',
    restart_required: 'info',
    to_configure: 'warning',
    pending: 'info',
    running: 'success',
    unknown: 'error',
  },
  INPUT_DEFAULT_PORT: 6514,
  basicOffer: 'logs-basic',
  offertypes: {
    BASIC: 'Basic',
    PRO: 'Pro',
  },
  productName: 'logs',
  ALIAS_OPTION_REFERENCE: 'logs-alias',
  DASHBOARD_OPTION_REFERENCE: 'logs-dashboard',
  INDEX_OPTION_REFERENCE: 'logs-index',
  INPUT_OPTION_REFERENCE: 'logs-input',
  ROLE_OPTION_REFERENCE: 'logs-role',
  STREAM_OPTION_REFERENCE: 'logs-stream',
  PRODUCT_COUNT: {
    'logs-input-2': 2,
    'logs-input-4': 4,
    'logs-input-8': 8,
    'logs-dashboard-5': 5,
    'logs-stream-5': 5,
    'logs-kibana-1': 1,
    'logs-alias-5': 5,
    'logs-index-1': 1,
    'logs-index-2': 1,
    'logs-index-4': 1,
    'logs-index-8': 1,
    'logs-index-16': 1,
  },
  logstash: 'LOGSTASH',
  flowgger: 'FLOWGGER',
  patternRowFill: 5,
});
